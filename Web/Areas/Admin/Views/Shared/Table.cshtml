@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@model Core.DataTables.DataTablesModel

<table class="table-striped table-responsive-sm" id="@Model.Name">
    <thead>
        <tr>
            @foreach(var column in Model.ColumnCollection){
                <th>@column.Title</th>
            }
        </tr>
    </thead>
    <tbody></tbody>
</table>
<div class="table-footer" id="@Model.Name-footer">
    <div class="pagination">
        @*<a href="#">&laquo;</a>
        <a href="#">1</a>
        <a href="#" class="active">2</a>
        <a href="#">3</a>
        <a href="#">4</a>
        <a href="#">5</a>
        <a href="#">&raquo;</a>*@
    </div>
    <div class="table-result-count">
        <p>Showing <spnn class="table-page-start-count"></spnn> to <span class="table-page-end-count"></span> of <span class="total-table-entries"></span> entries</p>
    </div>
</div>
@if (!string.IsNullOrEmpty(Model.SearchButtonId))
{
    <script asp-location="Footer">
        let searchId = "#@Model.SearchButtonId";

        $(searchId).on("click", function () {
            readTableData();
        });

    </script>
}

<script asp-location="Footer">
    var columnCollections = @Json.Serialize(Model.ColumnCollection);
    var filterCollections = @Json.Serialize(Model.Filters);
    var filterNames = filterCollections.map(filter => filter.name);
    var columnsTitles = columnCollections.map(col => col.title);
    var columnsTypes = columnCollections.map(col => col.render);
    var columns = columnCollections.map(col => col.data.charAt(0).toLowerCase() + col.data.substr(1));

    function getFormatedDate(date)
    {
        let m = new Date(date);
        let localHours = m.getHours() > 12 ? m.getHours() - 12 : m.getHours();
        let AmPm = m.getHours() > 12 ? "PM" : "AM";
        let dateString = ("0" + m.getDate()).slice(-2) + "-" + ("0" + (m.getMonth() + 1)).slice(-2) + "-" + m.getFullYear() + " " + ("0" + localHours).slice(-2) + ":" + ("0" + m.getMinutes()).slice(-2) + " " + AmPm;
        return dateString;
    }
    function getSearchFilterData()
    {
        let filterData = {};
        filterNames.forEach((item, index) => {
            filterData[item] = ($(`#${item}`).val() == undefined) ? '' : $(`#${item}`).val();
        });
        return filterData;
    }

    function setPagination(response)
    {
        $('#@Model.Name-footer .pagination').empty();
        let paginationHtml = '';
        if(response.currentPage > 1){
            paginationHtml += `<a class="page-link" onClick="readTableData(1);">&laquo</a>`;
            let previousPage = response.currentPage - 1;
            paginationHtml += `<a class="page-link" onClick="readTableData(${previousPage})">&lt</a>`;
        }
        for(var page = response.startPage; page<= response.endPage; page++)
        {
            if(page == response.currentPage){
                paginationHtml += `<a class="page-link active" onClick="readTableData(${page})">${page}</a>`;
            }else{
                paginationHtml += `<a class="page-link" onClick="readTableData(${page})">${page}</a>`;
            }
        }
        if(response.currentPage < response.totalPages){
            let nextPage = response.currentPage + 1;
            paginationHtml += `<a class="page-link" onClick="readTableData(${nextPage})">&gt</a>`;
            paginationHtml += `<a class="page-link" onClick="readTableData(${response.totalPages})">&raquo</a>`;
        }

        $('#@Model.Name-footer .pagination').append(paginationHtml);
    }

    function setPageItemCounts(currentPage, pageSize, totalItems)
    {
        $('#@Model.Name-footer .total-table-entries').html(totalItems);
        if(totalItems > 0){
            if (currentPage == 1) {
                $('#@Model.Name-footer .table-page-start-count').html(1);
                $('#@Model.Name-footer .table-page-end-count').html(pageSize);
            } else {
                let startPageItem = (currentPage - 1) * pageSize;
                let endPageItem = startPageItem + pageSize;
                $('#@Model.Name-footer .table-page-start-count').html(startPageItem);
                if (totalItems < endPageItem) {
                    $('#@Model.Name-footer .table-page-end-count').html(totalItems);
                } else {
                    $('#@Model.Name-footer .table-page-end-count').html(endPageItem);
                }
            }
        }else{
            $('#@Model.Name-footer .table-page-start-count').html("0");
            $('#@Model.Name-footer .table-page-end-count').html("0");
        }
        
    }

    function setTableData(response) {
        $('#@Model.Name tbody').empty();
        var tableRows = '';
        for (var rowIndex in response.data) {
            tableRows += '<tr>';
            for (var index in columns) {
                if (columns[index] == "id") {
                    if (columnsTypes[index] == @Json.Serialize((int)Render.Edit)) {
                        tableRows += `<td><a class="btn btn-secondary" href="/admin/@Model.UrlUpdate.ControllerName/@Model.UrlUpdate.ActionName?${columns[index]}=${response.data[rowIndex][columns[index]]}">${columnsTitles[index]}</a></td>`;
                    } else if (columnsTypes[index] == @Json.Serialize((int)Render.Delete)) {
                        tableRows += `<td><a class="btn btn-danger" onClick="tableDataDelete(this);" data-url="/admin/@Model.UrlDelete.ControllerName/@Model.UrlDelete.ActionName" data-id="${response.data[rowIndex][columns[index]]}">${columnsTitles[index]}</a></td>`;
                    } else if (columnsTypes[index] == @Json.Serialize((int)Render.Data)) {
                        tableRows += '<td>' + response.data[rowIndex][columns[index]] + '</td>';
                    }
                } else {
                    if (typeof (response.data[rowIndex][columns[index]]) == "boolean") {
                        if (response.data[rowIndex][columns[index]] == true)
                            tableRows += '<td><span style="color:green;" class="material-symbols-outlined">check_circle</span></td >';
                        else {
                            tableRows += '<td><span style="color:red;" class="material-symbols-outlined">cancel</span></td >';
                        }
                    }
                    else if (columns[index].toLowerCase().includes("date")){
                        if (response.data[rowIndex][columns[index]] != null && response.data[rowIndex][columns[index]] != undefined){
                            tableRows += '<td>' + getFormatedDate(response.data[rowIndex][columns[index]]) + '</td>';
                        }else{
                            tableRows += '<td></td>';
                        }
                    }
                    else {
                        if(response.data[rowIndex][columns[index]] == null)
                            tableRows += '<td></td>';
                        else
                            tableRows += '<td>' + response.data[rowIndex][columns[index]] + '</td>';
                    }
                }
            }
            tableRows += '</tr>';
        }
        
        $('#@Model.Name tbody').append(tableRows);
        setPageItemCounts(response.currentPage, response.pageSize, response.totalItems);
        setPagination(response);

    }

    function tableDataDelete(event) {
        let id = $(event).attr("data-id");
        let url = $(event).attr("data-url");
        if (confirm("Are you sure to delete this row? This can't undone") == true) {
            text = "You pressed OK!";
            $.ajax({
                url: url,
                type: "GET",
                dataType: "json",
                data: {
                    id: id
                },
                success: function (data, textStatus, jqXHR) {
                    console.log(data);
                }
            });
        }
    }
    function readTableData(page)
    {
        let data = getSearchFilterData();
        if(page != undefined && page != null){
            data['currentPage'] = page;
        }else{
            data['currentPage'] = 1;
        }
        
        $.ajax({
            url: "@Model.UrlRead.ActionName",
            type: "GET",
            contentType: "application/json",
            data: data,
            success: function (response, textStatus, jqXHR) {
                if (response != null && response != undefined) {
                    setTableData(response);
                    
                } else {
                    alert('Data not found');
                }

            },
            error: function (jqXHR, textStatus, errorThrown) {
            }
        });
    }
    readTableData();
</script>